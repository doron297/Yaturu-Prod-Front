/**
 * Yaturu
 * ## Welcome  This is a place to put general notes and extra information, for internal use.
 *   To get started designing/documenting this API, select a version on the left. ## Welcome
 *   This is a place to put general notes and extra information, for internal use.
 *   To get started designing/documenting this API, select a version on the left.
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response } from '@angular/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models from '../model/models';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class TouristApi {
    protected basePath = 'https://yaturu-test-server.appspot.com/_ah/api';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
        this.defaultHeaders.set('Content-Type', 'application/json');
    }

	/**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1, T2>(objA: T1, objB: T2) {
        for (let key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return <T1 & T2>objA;
    }

    /**
     * deleteTourist
     * 
     * @param touristKey 
     * @param authorization token with \&quot;Bearer \&quot; prefix
     */
    public dELETETouristTouristKey(touristKey: string, authorization: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.dELETETouristTouristKeyWithHttpInfo(touristKey, authorization, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getAllTourist
     * 
     * @param authorization token with \&quot;Bearer \&quot; prefix
     */
    public gETTourist(authorization: string, extraHttpRequestParams?: any): Observable<Array<models.Tourist>> {
        return this.gETTouristWithHttpInfo(authorization, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getTouristByTrip
     * getTourist
     * @param tripKey 
     * @param authorization token with \&quot;Bearer \&quot; prefix
     */
    public gETTouristTripTripKey(tripKey: string, authorization: string,
        extraHttpRequestParams?: any): Observable<models.Touristlistwrapper> {
        return this.gETTouristTripTripKeyWithHttpInfo(tripKey, authorization, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * touristLogin
     * login
     * @param touristKey 
     * @param body 
     */
    public pOSTTouristLogin(touristKey: string, body?: models.ImageAndDeviceTokenWrapper,
        extraHttpRequestParams?: any): Observable<models.TokenWrapper> {
        return this.pOSTTouristLoginWithHttpInfo(touristKey, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * updateTourist
     * 
     * @param touristKey 
     * @param authorization token with \&quot;Bearer \&quot; prefix
     * @param body 
     */
    public pOSTTouristTouristKey(touristKey: string, authorization: string,
        body?: models.Tourist, extraHttpRequestParams?: any): Observable<any> {
        return this.pOSTTouristTouristKeyWithHttpInfo(touristKey, authorization, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * updateFirebaseToken
     * 
     * @param touristKey 
     * @param body 
     * @param token 
     */
    public pOSTTouristTouristKeyFirebaseToken(touristKey: string,
        body?: models.FirebaseTokensWrapper, token?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.pOSTTouristTouristKeyFirebaseTokenWithHttpInfo(touristKey, body, token, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * createTourist
     * 
     * @param authorization token with \&quot;Bearer \&quot; prefix
     * @param body 
     */
    public pUTTourist(authorization: string, body?: models.Tourist, extraHttpRequestParams?: any): Observable<models.KeyWrapper> {
        return this.pUTTouristWithHttpInfo(authorization, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * addTouristAndLogin
     * 
     * @param body 
     */
    public pUTTouristLogin(body?: models.TouristClient, extraHttpRequestParams?: any): Observable<models.TokenWrapper> {
        return this.pUTTouristLoginWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * deleteTourist
     * 
     * @param touristKey 
     * @param authorization token with \&quot;Bearer \&quot; prefix
     */
    public dELETETouristTouristKeyWithHttpInfo(touristKey: string,
        authorization: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/tourist/${touristKey}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'touristKey' is not null or undefined
        if (touristKey === null || touristKey === undefined) {
            throw new Error('Required parameter touristKey was null or undefined when calling dELETETouristTouristKey.');
        }
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling dELETETouristTouristKey.');
        }

        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];





        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            body: ''
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getAllTourist
     * 
     * @param authorization token with \&quot;Bearer \&quot; prefix
     */
    public gETTouristWithHttpInfo(authorization: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/tourist`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling gETTourist.');
        }

        headers.set('Authorization', String(authorization));


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];





        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            body: ''
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getTouristByTrip
     * getTourist
     * @param tripKey 
     * @param authorization token with \&quot;Bearer \&quot; prefix
     */
    public gETTouristTripTripKeyWithHttpInfo(tripKey: string, authorization: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/tourist/trip/${tripKey}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'tripKey' is not null or undefined
        if (tripKey === null || tripKey === undefined) {
            throw new Error('Required parameter tripKey was null or undefined when calling gETTouristTripTripKey.');
        }
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling gETTouristTripTripKey.');
        }

        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];





        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            body: ''
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * touristLogin
     * login
     * @param touristKey 
     * @param body 
     */
    public pOSTTouristLoginWithHttpInfo(touristKey: string,
        body?: models.ImageAndDeviceTokenWrapper, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/tourist/login/${touristKey}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'touristKey' is not null or undefined
        if (touristKey === null || touristKey === undefined) {
            throw new Error('Required parameter touristKey was null or undefined when calling pOSTTouristLogin.');
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];



        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * updateTourist
     * 
     * @param touristKey 
     * @param authorization token with \&quot;Bearer \&quot; prefix
     * @param body 
     */
    public pOSTTouristTouristKeyWithHttpInfo(touristKey: string,
        authorization: string, body?: models.Tourist, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/tourist/${touristKey}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'touristKey' is not null or undefined
        if (touristKey === null || touristKey === undefined) {
            throw new Error('Required parameter touristKey was null or undefined when calling pOSTTouristTouristKey.');
        }
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling pOSTTouristTouristKey.');
        }
        headers.set('Authorization', String(authorization));


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];



        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * updateFirebaseToken
     * 
     * @param touristKey 
     * @param body 
     * @param token 
     */
    public pOSTTouristTouristKeyFirebaseTokenWithHttpInfo(touristKey: string,
        body?: models.FirebaseTokensWrapper, token?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/tourist/${touristKey}/firebase/token`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'touristKey' is not null or undefined
        if (touristKey === null || touristKey === undefined) {
            throw new Error('Required parameter touristKey was null or undefined when calling pOSTTouristTouristKeyFirebaseToken.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];



        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * createTourist
     * 
     * @param authorization token with \&quot;Bearer \&quot; prefix
     * @param body 
     */
    public pUTTouristWithHttpInfo(authorization: string, body?: models.Tourist, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/tourist`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling pUTTourist.');
        }

        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];



        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * addTouristAndLogin
     * 
     * @param body 
     */
    public pUTTouristLoginWithHttpInfo(body?: models.TouristClient, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/tourist/login`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];



        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
